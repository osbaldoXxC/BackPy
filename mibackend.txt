mi backend esta echo asi con 5 carpetas y 2 arviso con el cual los 2 archivos se llama .env con el codigo:
# Credenciales de la API de Cloudinary para las imagenes
CLOUDINARY_CLOUD_NAME=dxcrgn9jv
CLOUDINARY_API_KEY=696278541753764
CLOUDINARY_API_SECRET=c7q7DrLhgaFyporektwM57MEyfw
PORT=5000

#conexcion de mongo db atlas
MONGODB_URI=mongodb+srv://irvinmartinealejo:Password@maquiladora.uuwci.mongodb.net/maquila?retryWrites=true&w=majority&appName=maquiladora

# API para que pueda enviar correo de confirmaciondespues de que se resgistraron
SMTP_HOST=sandbox.smtp.mailtrap.io
SMTP_PORT=2525  # Puedes usar 25, 465, 587 o 2525, pero 2525 es el recomendado para Mailtrap
SMTP_USER=8e164ac523f905
SMTP_PASS=6e685f971ae44c

# Aqui consumo la API para saber si los correos existen
MAILBOXLAYER_API_KEY=44968a72371a750ea01cb62fe9d8ae75

el segundo archivo se llama index.js con el codigo:
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
require('dotenv').config();
const connectDB = require('./config/db');
const usuarioRoutes = require('./routes/usuarioRoutes');

const app = express();

app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

connectDB();

app.use('/usuarios', usuarioRoutes);

app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Algo salió mal!' });
});

const port = process.env.PORT || 5000;
app.listen(port, () => {
  console.log(`Servidor backend corriendo en el puerto ${port}`);
});


ahora las carpetas son 5 como te dije la primera se llama config y tiene 3 archivos, el primero se llama cloudinaryConfig.js con el codigo:
const cloudinary = require('cloudinary').v2;

cloudinary.config({ 
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME, 
  api_key: process.env.CLOUDINARY_API_KEY, 
  api_secret: process.env.CLOUDINARY_API_SECRET,
  secure: true
});

module.exports = cloudinary;
el segundo archivo se llama db.js con el codigo:
const mongoose = require('mongoose');

const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log(`MongoDB Connected: ${conn.connection.host}`);
  } catch (error) {
    console.error('Error de conexión a MongoDB:', error.message);
    process.exit(1);
  }
};

module.exports = connectDB;
el tercer archivo se llama multerConfig.js con el codigo:
const multer = require('multer');
const storage = multer.memoryStorage();

const fileFilter = (req, file, cb) => {
  if (file.mimetype.startsWith('image/')) {
    cb(null, true);
  } else {
    cb(new Error('Solo se permiten imágenes'), false);
  }
};

const upload = multer({
  storage: storage,
  fileFilter: fileFilter,
  limits: { fileSize: 5 * 1024 * 1024 } // Límite de 5MB
});

module.exports = upload;
la segunda carpeta se llama controllers y tiene un archivo que se llama usuarioController.js con el codigo:
const Usuario = require('../models/UsuarioModel');
const cloudinary = require('../config/cloudinaryConfig');
const nodemailer = require('nodemailer');
const axios = require('axios'); // Para hacer peticiones HTTP

// Configurar el transporte de Nodemailer con Mailtrap
const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,
  port: process.env.SMTP_PORT,
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  },
});

// Verificar si el correo es válido con MailboxLayer
const verifyEmail = async (email) => {
  try {
    const response = await axios.get(`https://apilayer.net/api/check`, {
      params: {
        access_key: process.env.MAILBOXLAYER_API_KEY,
        email: email,
        format: '1', // Formato JSON
      },
    });

    const { smtp_check, is_valid } = response.data;

    if (!response.data.format_valid || !response.data.mx_found || response.data.disposable) {
      return false;
    }    

    return true;
  } catch (error) {
    return false;
  }
};

const registerUser = async (req, res) => {
  try {
    const { nombre, apellido, email, telefono, password } = req.body;

    // Verificar formato básico del correo
    const emailRegex = /^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,7}$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({ message: 'El correo electrónico tiene un formato inválido' });
    }

    // Verificar si el correo existe usando MailboxLayer
    const isEmailValid = await verifyEmail(email);
    if (!isEmailValid) {
      return res.status(400).json({ message: 'El correo electrónico no existe o no es válido' });
    }

    // Verificar si el correo ya está registrado
    const existingUser = await Usuario.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: 'El correo ya está registrado' });
    }

    if (!req.file) {
      return res.status(400).json({ message: 'Imagen no proporcionada' });
    }

    // Subir imagen a Cloudinary
    const imageStr = `data:${req.file.mimetype};base64,${req.file.buffer.toString('base64')}`;
    const uploadResult = await cloudinary.uploader.upload(imageStr, {
      folder: 'usuarios',
      resource_type: 'auto'
    });

    // Crear el nuevo usuario
    const newUser = new Usuario({
      nombre,
      apellido,
      email,
      telefono,
      password,
      image_url: uploadResult.secure_url
    });

    await newUser.save();

    // Enviar correo de confirmación a través de Mailtrap
    const mailOptions = {
      from: process.env.SMTP_USER, // Correo desde el cual se enviará
      to: email, // Correo del usuario registrado
      subject: "Registro exitoso",
      text: `Hola ${nombre},\n\nTu cuenta ha sido creada exitosamente.\n\nSaludos,\nEquipo de Soporte`,
    };

    // Enviar el correo
    await transporter.sendMail(mailOptions);

    return res.status(201).json({ message: 'Usuario registrado y correo enviado', user: newUser });
  } catch (error) {
    res.status(500).json({ message: 'Error en el servidor', error: error.message });
  }
};

module.exports = { registerUser };

ahora en la carpeta tercera carpeta se llama models, tiene un archivo llamdo UsuarioModel.js con codigo:
const mongoose = require('mongoose');

const usuarioSchema = new mongoose.Schema({
  nombre: { type: String, required: true, trim: true },
  apellido: { type: String, required: true, trim: true },
  email: { 
    type: String, 
    required: true, 
    unique: true, 
    lowercase: true, 
    trim: true, 
    match: [/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/, 'Email inválido']
  },
  telefono: { type: String, required: true, trim: true },
  password: { type: String, required: true, minlength: 6 },
  image_url: { type: String, required: true },
  createdAt: { type: Date, default: Date.now }
}, {
  collection: 'usuarios'
});

const Usuario = mongoose.model('Usuario', usuarioSchema);
module.exports = Usuario;

la cuarta carpeta se llama node_modules y esa se crea cuando se hace el proyecto 
la quinta y ultima carpeta se llama routes con un archivo se llama usuarioRoutes.js con el codigo:
const express = require('express');
const router = express.Router();
const upload = require('../config/multerConfig');
const usuarioController = require('../controllers/usuarioController');

router.post('/register', upload.single('image'), usuarioController.registerUser);

module.exports = router;
